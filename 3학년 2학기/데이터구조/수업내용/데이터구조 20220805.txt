Basic Data Structures

Abstract Data Type

데이터 추상화(Data Abstraction)
어떤 오브젝트가 무엇이고 뭘 하는지를 구별하겠다.

EX) Stack
Implementation: array or linked list [어떻게 구현하는지]
Specification: push, pop, ... [뭘 하는지]

자료형(Data Type)
오브젝트의 집합, 그 오브젝트들의 연산

ADT(Abstract Data Type)
C++는 데이터와 operation을 묶어서 사용한다.

외부에서는 public function(interface)만 호출이 가능하다.
내부 데이터 구조가 어떻게 되어 있는지 확인은 불가능하다.
때문에 내부가 바뀌더라도 외부(interface)는 바뀌지 않는다.

이 수업에서는 Date Type이 실제로 어떻게 구현되는지를 배운다.
ADT: Data type의 논리적 형태를 정의한다.

-> STACK에는 push, pop함수를 갖고 있고 push, pop은 어떤 것이다.
DATA structure: 실제로 어떻게 구현되어 있을까?

-> 어떻게 구현하는게 더 효율적이고 빠를까
----------------------------------------------------------------------------------
C++ Class
* Constructor
	어떤 클래스의 오브젝트를 생성하면 자동으로 호출된다.
	이름이 클래스의 이름과 동일하며 리턴 타입이 없다.
	멤버 변수를 초기화 하거나 메모리를 할당받아야할 때 유용하다.

* Destructor
	어떤 오브젝트가 소멸되면 자동으로 호출된다.
	Constructor앞에 '~'가 붙어 있으며 리턴 타입과 파라미터가 없다.
	오브젝트가 사라질 때 할당받았던 자원들을 해제(close file, deallocate)할 때 유용하다.

* Template
	type(char, int ...)에 따라서 코드를 중복해서 짜야하면 정말 귀찮다. 템플릿은 타입과 관계없이
	동작할 수 있는 코드를 하나만 짜서 모든 타입에서 돌게할 수 있게 해준다.
	TYPE을 파라미터로 받는다.
	generic(일반화)한 프로그래밍이 가능해진다.

----------------------------------------------------------------------------------
Stack
* LIFO (Last In First Out) list
	위쪽 끝을 top이라 부르고, 아래쪽 끝을 bottom이라 부른다.
	element의 추가, 삭제는 top에서만 가능하다

* Standard operations
	IsEmpty, Top, Push, Pop ....

* Array를 통한 구현
	a b c d e ...
	0 1 2 3 4 ...
	0부터 시작해서 top까지 저장 현재의 top은 e
	top이란 변수를 유지하고 있으면서 top이 >= 0 이면 스텍에 값이 존재한다.
	시간 복잡도는 O(1)
	
코드 구현 화면에서 함수뒤에 const가 붙으면 멤버변수의 값을 바꾸지 못함.
void Push(const T& item); 에서 &를 붙이면 값의 복사가 아닌 값 자체를 전달하기 때문에 주소값이 바뀌지 않는다. 때문에 포인터보다 안전하다.
Stack<T>::Stack(int stackCapacity)
		   : capacity(stackCapacity) <- 멤버 변수인 capacity를 초기화 하는 것(간단히 표현하는 문법)
inline T& Stack<T>::Top() const <- 값을 리턴할 때 복사되서 넘어가는 것이 아닌 값 자체가 넘어간다.


----------------------------------------------------------------------------------
Queue
* 























	
